---
- name: Wait for nodes to become available
  hosts: all
  gather_facts: false
  tasks:
    - name: Wait for nodes to become available
      ansible.builtin.wait_for_connection:
        delay: 5
        timeout: 300

- name: Kubeadm prereqs
  hosts: all
  become: true
  tasks:
    - name: Download containerd
      ansible.builtin.get_url:
        url: https://github.com/containerd/containerd/releases/download/v{{ containerd_release_version }}/containerd-{{ containerd_release_version }}-linux-amd64.tar.gz
        dest: /tmp/containerd.tar.gz
        mode: '0644'
    - name: Extract containerd
      ansible.builtin.unarchive:
        src: /tmp/containerd.tar.gz
        dest: /usr/local
        remote_src: true
    - name: Download containerd service file
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        dest: /etc/systemd/system/containerd.service
        mode: '0644'
    - name: Create /etc/containerd directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'
    - name: Copy containerd.toml
      ansible.builtin.copy:
        src: ansible-files/containerd.toml
        dest: /etc/containerd/config.toml
        mode: '0644'
    - name: Download and install runc
      ansible.builtin.get_url:
        url: https://github.com/opencontainers/runc/releases/download/v{{ runc_release_version }}/runc.amd64
        dest: /usr/local/sbin/runc
        mode: '0755'
    - name: Start and enable containerd
      ansible.builtin.systemd:
        state: started
        daemon_reload: true
        enabled: true
        name: containerd.service
    - name: Load overlay and br_netfilter modules
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
    - name: Persist overlay and br_netfilter modules
      ansible.builtin.lineinfile:
        path: /etc/modules
        line: "{{ item }}"
        insertafter: EOF
      loop:
        - overlay
        - br_netfilter
    - name: Sysctl params
      ansible.posix.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: true
        state: present
        reload: true
      loop:
        - { name: "net.bridge.bridge-nf-call-iptables", value: 1}
        - { name: "net.bridge.bridge-nf-call-ip6tables", value: 1}
        - { name: "net.ipv4.ip_forward", value: 1}
    - name: Download kubernetes-archive-keyring.gpg
      ansible.builtin.get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /usr/share/keyrings/kubernetes-archive-keyring.gpg
        mode: '0644'
    - name: Copy /etc/apt/sources.list.d/kubernetes.list
      ansible.builtin.copy:
        src: ansible-files/kubernetes-sources.list
        dest: /etc/apt/sources.list.d/kubernetes.list
        mode: '0644'
    - name: Generate and copy kubeadm-config.yaml
      ansible.builtin.template:
        src: ansible-files/kubeadm-config.yaml.j2
        dest: /tmp/kubeadm-config.yaml
        mode: '0644'
      vars:
        control_plane_endpoint: "{{ kube_api_nlb_hostname }}:6443"
    - name: Install kubeadm
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - kubelet={{ kubernetes_version }}-00
          - kubeadm={{ kubernetes_version }}-00
          - kubectl={{ kubernetes_version }}-00
        update_cache: true

- name: Initialize first master
  hosts: masters[0]
  become: true
  tasks:
    - name: Install pip
      ansible.builtin.apt:
        pkg:
          - pip
    - name: Install Python modules for Kubernetes
      ansible.builtin.pip:
        name:
          - kubernetes >= 12.0.0
          - PyYAML >= 3.11
          - jsonpatch
    - name: Kubeadm init # only runs if kubelet is not active
      ansible.builtin.shell: >
        systemctl is-active --quiet kubelet.service || \
        kubeadm init --config /tmp/kubeadm-config.yaml --node-name {{ inventory_hostname }} \
        --upload-certs
    - name: Download flannel manifets
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
        dest: /tmp/kube-flannel.yaml
        mode: '0644'
    - name: Install flannel
      kubernetes.core.k8s:
        kubeconfig: /etc/kubernetes/admin.conf
        state: present
        src: /tmp/kube-flannel.yaml

- name: Join nodes
  hosts:
    - workers
    - masters
  become: true
  tasks:
    - name: Get worker join command
      ansible.builtin.shell: >
        kubeadm token create --print-join-command
      when: inventory_hostname == groups['masters'][0]
      register: worker_join_command
    - name: Get master join command
      ansible.builtin.shell: >
        echo $(kubeadm token create --print-join-command) --control-plane --certificate-key $(kubeadm init phase upload-certs --upload-certs | tail -1)
      when: inventory_hostname == groups['masters'][0]
      register: master_join_command
    - name: Join masters
      ansible.builtin.shell: >
        systemctl is-active --quiet kubelet.service || \
        {{ hostvars[groups['masters'][0]]['master_join_command']['stdout'] }} --node-name {{ inventory_hostname }}
      when: inventory_hostname in groups['masters'] and inventory_hostname != groups['masters'][0]
    - name: Join workers
      ansible.builtin.shell: >
        systemctl is-active --quiet kubelet.service || \
        {{ hostvars[groups['masters'][0]]['worker_join_command']['stdout'] }} --node-name {{ inventory_hostname }}
      when: inventory_hostname in groups['workers']
    - name: Untaint masters if no workers
      delegate_to: "{{ groups['masters'][0] }}"
      when: num_of_workers == "0" and inventory_hostname in groups['masters']
      vars:
        num_of_workers: "{{ groups['workers'] | length }}"
      kubernetes.core.k8s_taint:
        kubeconfig: /etc/kubernetes/admin.conf
        state: absent
        name: "{{ inventory_hostname }}"
        taints:
          - effect: NoSchedule
            key: "{{ item }}"
      loop:
        - node-role.kubernetes.io/control-plane
        - node-role.kubernetes.io/master

- name: Get kubeconfig
  hosts: masters[0], localhost
  tasks:
    - name: Download kubeconfig
      become: true
      when: inventory_hostname == groups['masters'][0]
      ansible.builtin.fetch:
        src: /etc/kubernetes/admin.conf
        dest: ansible-output/kubeconfig.yaml
        flat: true
    - name: Fix kubeconfig permissions
      when: inventory_hostname == "localhost"
      ansible.builtin.file:
        mode: "0600"
        path: "{{ playbook_dir }}/ansible-output/kubeconfig.yaml"
